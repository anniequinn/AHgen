# Returns dataframe with two columns:
# `package_name`: packages(s) which the function is part of (chr)
# `builtin_package`:  whether the package comes with standard R (a 'builtin'  package)
# Arguments:
# f: name of function for which the package(s) are to be identified.
if ("tidyverse" %in% rownames(installed.packages()) == FALSE) {
cat("tidyverse is needed for this fuction. Please install. Stopping")
stop()}
suppressMessages(library(tidyverse))
# search for help in list of installed packages
help_installed <- help.search(paste0("^",f,"$"), agrep = FALSE)
# extract package name from help file
pckg_hits <- help_installed$matches[,"Package"]
if (length(pckg_hits) == 0) pckg_hits <- "No_results_found"
# get list of built-in packages
pckgs <- installed.packages()  %>% as_tibble
pckgs %>%
dplyr::filter(Priority %in% c("base","recommended")) %>%
dplyr::select(Package) %>%
distinct -> builtin_pckgs_df
# check for each element of 'pckg hit' whether its built-in and loaded (via match). Then print results.
results <- data_frame(
package_name = pckg_hits,
builtin_pckage = match(pckg_hits, builtin_pckgs_df$Package, nomatch = 0) > 0,
loaded = match(paste("package:",pckg_hits, sep = ""), search(), nomatch = 0) > 0
)
return(results)
}
# Clear the environment
rm(list = ls()); cat("/014"); gc(verbose = TRUE)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path)); getwd()
find_funs <- function(f) {
# Returns dataframe with two columns:
# `package_name`: packages(s) which the function is part of (chr)
# `builtin_package`:  whether the package comes with standard R (a 'builtin'  package)
# Arguments:
# f: name of function for which the package(s) are to be identified.
if ("tidyverse" %in% rownames(installed.packages()) == FALSE) {
cat("tidyverse is needed for this fuction. Please install. Stopping")
stop()}
suppressMessages(library(tidyverse))
# search for help in list of installed packages
help_installed <- help.search(paste0("^",f,"$"), agrep = FALSE)
# extract package name from help file
pckg_hits <- help_installed$matches[,"Package"]
if (length(pckg_hits) == 0) pckg_hits <- "No_results_found"
# get list of built-in packages
pckgs <- installed.packages()  %>% as_tibble
pckgs %>%
dplyr::filter(Priority %in% c("base","recommended")) %>%
dplyr::select(Package) %>%
distinct -> builtin_pckgs_df
# check for each element of 'pckg hit' whether its built-in and loaded (via match). Then print results.
results <- data_frame(
package_name = pckg_hits,
builtin_pckage = match(pckg_hits, builtin_pckgs_df$Package, nomatch = 0) > 0,
loaded = match(paste("package:",pckg_hits, sep = ""), search(), nomatch = 0) > 0
)
return(results)
}
functionsList <-
readxl::read_xlsx("functionsTracker-packages.xlsx")
functionsList <-
readxl::read_xlsx("functionsTracker-packages.xlsx") %>%
pull(functions)
# Load tidyverse
library(tidyverse)
find_funs <- function(f) {
# Returns dataframe with two columns:
# `package_name`: packages(s) which the function is part of (chr)
# `builtin_package`:  whether the package comes with standard R (a 'builtin'  package)
# Arguments:
# f: name of function for which the package(s) are to be identified.
if ("tidyverse" %in% rownames(installed.packages()) == FALSE) {
cat("tidyverse is needed for this fuction. Please install. Stopping")
stop()}
suppressMessages(library(tidyverse))
# search for help in list of installed packages
help_installed <- help.search(paste0("^",f,"$"), agrep = FALSE)
# extract package name from help file
pckg_hits <- help_installed$matches[,"Package"]
if (length(pckg_hits) == 0) pckg_hits <- "No_results_found"
# get list of built-in packages
pckgs <- installed.packages()  %>% as_tibble
pckgs %>%
dplyr::filter(Priority %in% c("base","recommended")) %>%
dplyr::select(Package) %>%
distinct -> builtin_pckgs_df
# check for each element of 'pckg hit' whether its built-in and loaded (via match). Then print results.
results <- data_frame(
package_name = pckg_hits,
builtin_pckage = match(pckg_hits, builtin_pckgs_df$Package, nomatch = 0) > 0,
loaded = match(paste("package:",pckg_hits, sep = ""), search(), nomatch = 0) > 0
)
return(results)
}
functionsList <-
readxl::read_xlsx("functionsTracker-packages.xlsx") %>%
pull(functions)
packages <-
functionsList[1]
packages <-
functionsList[2]
packages <-
functionsList[1]
packages <-
functionsList[1] %>% find_funs
View(packages)
functionsList <-
readxl::read_xlsx("functionsTracker_packagesList_20230707.xlsx") %>%
pull(functions)
packages <-
functionsList %>%
lapply(find_funs)
packages <-
functionsList %>%
lapply(find_funs) %>%
do.call(rbind)
packages <-
functionsList %>%
lapply(find_funs) %>%
bind_rows
View(packages)
packages <-
functionsList %>%
lapply(find_funs)
View(packages)
nrow(packagesList[1])
nrow(packages[1])
packages[1]
packages[1] %>% nrow
packages[1] %>% length
# Clear the environment
rm(list = ls()); cat("/014"); gc(verbose = TRUE)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path)); getwd()
# Load tidyverse
library(tidyverse)
find_funs <- function(f) {
# Returns dataframe with two columns:
# `package_name`: packages(s) which the function is part of (chr)
# `builtin_package`:  whether the package comes with standard R (a 'builtin'  package)
# Arguments:
# f: name of function for which the package(s) are to be identified.
if ("tidyverse" %in% rownames(installed.packages()) == FALSE) {
cat("tidyverse is needed for this fuction. Please install. Stopping")
stop()}
suppressMessages(library(tidyverse))
# search for help in list of installed packages
help_installed <- help.search(paste0("^",f,"$"), agrep = FALSE)
# extract package name from help file
pckg_hits <- help_installed$matches[,"Package"]
if (length(pckg_hits) == 0) pckg_hits <- "No_results_found"
# get list of built-in packages
pckgs <- installed.packages()  %>% as_tibble
pckgs %>%
dplyr::filter(Priority %in% c("base","recommended")) %>%
dplyr::select(Package) %>%
distinct -> builtin_pckgs_df
# check for each element of 'pckg hit' whether its built-in and loaded (via match). Then print results.
results <- data_frame(
package_name = pckg_hits,
builtin_pckage = match(pckg_hits, builtin_pckgs_df$Package, nomatch = 0) > 0,
loaded = match(paste("package:",pckg_hits, sep = ""), search(), nomatch = 0) > 0
)
return(results)
}
functionsList =
readxl::read_xlsx("functionsTracker_packagesList_20230707.xlsx") %>%
pull(functions)
packagesList =
functionsList %>%
lapply(find_funs)
packageCheck <- function(packagesList) {
toCheck <- list()
certain <- list()
output <- list()
for(x in seq_along(packagesList)) {
if(length(x) > 1) {toCheck$x <- x}
else{certain$x <- x}
}
output$certain <- certain %>% bind_rows
output$toCheck <- toCheck
}
packages =
packagesList %>% packageCheck
packageCheck <- function(packagesList) {
toCheck <- list()
certain <- list()
output <- list()
for(x in seq_along(packagesList)) {
if(length(x) > 1) {toCheck$x <- x}
else{certain$x <- x}
}
output$certain <- certain %>% bind_rows
output$toCheck <- toCheck
return(output)
}
packages =
packagesList %>% packageCheck
packageCheck <- function(packagesList) {
toCheck <- list()
certain <- list()
output <- list()
for(x in 1:length(packagesList)) {
if(length(x) > 1) {toCheck$x <- x}
else{certain$x <- x}
}
output$certain <- certain %>% bind_rows
output$toCheck <- toCheck
return(output)
}
packages =
packagesList %>% packageCheck
View(packages)
View(packagesList)
find_funs <- function(functionName) {
# Returns dataframe with two columns:
# `package_name`: packages(s) which the function is part of (chr)
# `builtin_package`:  whether the package comes with standard R (a 'builtin'  package)
# Arguments:
# functionName: name of function for which the package(s) are to be identified.
if ("tidyverse" %in% rownames(installed.packages()) == FALSE) {
cat("tidyverse is needed for this fuction. Please install. Stopping")
stop()}
suppressMessages(library(tidyverse))
# search for help in list of installed packages
help_installed <- help.search(paste0("^",functionName,"$"), agrep = FALSE)
# extract package name from help file
pckg_hits <- help_installed$matches[,"Package"]
if (length(pckg_hits) == 0) pckg_hits <- "No_results_found"
# get list of built-in packages
pckgs <- installed.packages()  %>% as_tibble
pckgs %>%
dplyr::filter(Priority %in% c("base","recommended")) %>%
dplyr::select(Package) %>%
distinct -> builtin_pckgs_df
# check for each element of 'pckg hit' whether its built-in and loaded (via match). Then print results.
results <- data_frame(
functionName = functionName,
package_name = pckg_hits,
builtin_pckage = match(pckg_hits, builtin_pckgs_df$Package, nomatch = 0) > 0,
loaded = match(paste("package:",pckg_hits, sep = ""), search(), nomatch = 0) > 0
)
return(results)
}
functionsList =
readxl::read_xlsx("functionsTracker_packagesList_20230707.xlsx") %>%
pull(functions)
packagesList =
functionsList %>%
lapply(find_funs)
View(packagesList)
packageCheck <- function(packagesList) {
toCheck <- list()
certain <- list()
output <- list()
for(x in 1:length(packagesList)) {
if(length(x) > 1) {toCheck$x <- x}
else{certain$x <- x}
}
output$certain <- certain %>% bind_rows
output$toCheck <- toCheck
return(output)
}
packages =
packagesList %>% packageCheck
View(packages)
packageCheck <- function(packagesList) {
output <- list()
for(x in 1:length(packagesList)) {
if(length(x) > 1) {output$toCheck$x <- x}
else{output$certain$x <- x}
return(output)
}
output$certain <- output$certain %>% bind_rows
return(output)
}
packages =
packagesList %>% packageCheck
View(packages)
packageCheck <- function(packagesList) {
output <- list()
for(x in 1:length(packagesList)) {
if(length(x) > 1) {output$toCheck[[x]] <- x}
else{output$certain[[x]] <- x}
return(output)
}
output$certain <- output$certain %>% bind_rows
return(output)
}
packages =
packagesList %>% packageCheck
View(packages)
packageCheck <- function(packagesList) {
output <- list()
for(x in seq_along(packagesList)) {
if(length(x) > 1) {output$toCheck[[x]] <- x}
else{output$certain[[x]] <- x}
return(output)
}
output$certain <- output$certain %>% bind_rows
return(output)
}
packages =
packagesList %>% packageCheck
output$toCheck <- list()
output$certain <- list()
output <- list()
output$toCheck <- list()
output$certain <- list()
View(output)
packageCheck <- function(packagesList) {
output <- list()
output$toCheck <- list()
output$certain <- list()
for(x in seq_along(packagesList)) {
if(length(x) > 1) {output$toCheck[[x]] <- x}
else{output$certain[[x]] <- x}
}
output$certain <- output$certain %>% bind_rows
return(output)
}
packages =
packagesList %>% packageCheck
packageCheck <- function(packagesList) {
output <- list()
output$toCheck <- list()
output$certain <- list()
for(x in seq_along(packagesList)) {
if(length(x) > 1) {output$toCheck[[x]] <- x}
else{output$certain[[x]] <- x}
}
return(output)
}
packages =
packagesList %>% packageCheck
View(packages)
View(packagesList)
grp <- sapply(packagesList, length)
grp <- sapply(packagesList, nrow)
L1 <- split(L, grp)
L1 <- split(packagesList, grp)
View(L1)
View(L1)
packages$certain <- packages$`1`
View(packages)
# Read in list of function names and pull into a vector
functionsList =
readxl::read_xlsx("functionsTracker_packagesList_20230707.xlsx") %>%
pull(functions)
# Apply find_funs to list of function names
packagesList = functionsList %>% lapply(find_funs)
# Find number of possible packages for each function name
grp = sapply(packagesList, nrow)
# Separate outputs by number of possible packages
packages <- split(packagesList, grp)
packages$certain <- packages$`1`
View(packages)
packages$certain <- packages$`1` %>% bind_rows
View(packages)
# Separate outputs by number of possible packages
packages <- split(packagesList, grp) %>% bind_rows
View(packages)
packages$certain <- packages$`1`
# Read in list of function names and pull into a vector
functionsList =
readxl::read_xlsx("functionsTracker_packagesList_20230707.xlsx") %>%
pull(functions)
# Apply find_funs to list of function names
packagesList = functionsList %>% lapply(find_funs)
# Find number of possible packages for each function name
grp = sapply(packagesList, nrow)
# Separate outputs by number of possible packages
packages <- split(packagesList, grp) %>% bind_rows
packages$certain <- packages$`1`
View(packages)
# Find number of possible packages for each function name
grp = sapply(packagesList, nrow)
# Separate outputs by number of possible packages
packages <- split(packagesList, grp)
View(packages)
# Separate outputs by number of possible packages
packagesList <- split(packagesList, grp)
packages <- list()
packages$certain <- packagesList[1]
View(packages)
packages$certain <- packages$`1` %>% bind_rows
View(packagesList)
View(packages)
# Clear the environment
rm(list = ls()); cat("/014"); gc(verbose = TRUE)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path)); getwd()
# Load tidyverse
library(tidyverse)
find_funs <- function(functionName) {
# Returns dataframe with two columns:
# `package_name`: packages(s) which the function is part of (chr)
# `builtin_package`:  whether the package comes with standard R (a 'builtin'  package)
# Arguments:
# functionName: name of function for which the package(s) are to be identified.
if ("tidyverse" %in% rownames(installed.packages()) == FALSE) {
cat("tidyverse is needed for this fuction. Please install. Stopping")
stop()}
suppressMessages(library(tidyverse))
# search for help in list of installed packages
help_installed <- help.search(paste0("^",functionName,"$"), agrep = FALSE)
# extract package name from help file
pckg_hits <- help_installed$matches[,"Package"]
if (length(pckg_hits) == 0) pckg_hits <- "No_results_found"
# get list of built-in packages
pckgs <- installed.packages()  %>% as_tibble
pckgs %>%
dplyr::filter(Priority %in% c("base","recommended")) %>%
dplyr::select(Package) %>%
distinct -> builtin_pckgs_df
# check for each element of 'pckg hit' whether its built-in and loaded (via match). Then print results.
results <- data_frame(
functionName = functionName,
package_name = pckg_hits,
builtin_pckage = match(pckg_hits, builtin_pckgs_df$Package, nomatch = 0) > 0,
loaded = match(paste("package:",pckg_hits, sep = ""), search(), nomatch = 0) > 0
)
return(results)
}
# Read in list of function names and pull into a vector
functionsList =
readxl::read_xlsx("functionsTracker_packagesList_20230707.xlsx") %>%
pull(functions)
# Apply find_funs to list of function names
packagesList = functionsList %>% lapply(find_funs)
# Find number of possible packages for each function name
grp = sapply(packagesList, nrow)
# Separate outputs by number of possible packages
packagesList <- split(packagesList, grp)
# Create and tidy final output
packages <- list()
packages$certain <- packagesList[1] %>% bind_rows
View(packages)
View(packagesList)
# Clear the environment
rm(list = ls()); cat("/014"); gc(verbose = TRUE)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path)); getwd()
# Load tidyverse
library(tidyverse)
find_funs <- function(functionName) {
# Returns dataframe with two columns:
# `package_name`: packages(s) which the function is part of (chr)
# `builtin_package`:  whether the package comes with standard R (a 'builtin'  package)
# Arguments:
# functionName: name of function for which the package(s) are to be identified.
if ("tidyverse" %in% rownames(installed.packages()) == FALSE) {
cat("tidyverse is needed for this fuction. Please install. Stopping")
stop()}
suppressMessages(library(tidyverse))
# search for help in list of installed packages
help_installed <- help.search(paste0("^",functionName,"$"), agrep = FALSE)
# extract package name from help file
pckg_hits <- help_installed$matches[,"Package"]
if (length(pckg_hits) == 0) pckg_hits <- "No_results_found"
# get list of built-in packages
pckgs <- installed.packages()  %>% as_tibble
pckgs %>%
dplyr::filter(Priority %in% c("base","recommended")) %>%
dplyr::select(Package) %>%
distinct -> builtin_pckgs_df
# check for each element of 'pckg hit' whether its built-in and loaded (via match). Then print results.
results <- data_frame(
functionName = functionName,
package_name = pckg_hits,
builtin_pckage = match(pckg_hits, builtin_pckgs_df$Package, nomatch = 0) > 0,
loaded = match(paste("package:",pckg_hits, sep = ""), search(), nomatch = 0) > 0
)
return(results)
}
# Read in list of function names and pull into a vector
functionsList =
readxl::read_xlsx("functionsTracker_packagesList_20230707.xlsx") %>%
pull(functions)
# Apply find_funs to list of function names
packagesList = functionsList %>% lapply(find_funs)
# Find number of possible packages for each function name
grp = sapply(packagesList, nrow)
# Separate outputs by number of possible packages
packagesList <- split(packagesList, grp)
# Create and tidy final output
certain <- list()
certain <- packagesList[1] %>% bind_rows
View(certain)
View(packagesList)
# Manual checks
seven <- packagesList[7]
# Manual checks
seven <- packagesList[7] %>% bind_rows
View(seven)
# Manual checks
seven <- packagesList[8] %>% bind_rows
# Manual checks
long <- packagesList[8] %>% bind_rows
View(long)
View(seven)
View(packagesList)
?layout
??layout
?layout
install.packages(c("dbplyr", "digest", "pkgload", "readxl", "rstudioapi", "testthat"))
install.packages(c("dbplyr", "digest", "pkgload", "readxl", "rstudioapi", "testthat"))
install.packages(c("dbplyr", "digest", "pkgload", "readxl", "rstudioapi", "testthat"))
install.packages(c("dbplyr", "digest", "pkgload", "readxl", "rstudioapi", "testthat"))
